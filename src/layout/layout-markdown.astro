---
import Layout from "./layout.astro"
import Article from "@/components/article.astro"
import { getTagsByRefs } from "@/utils/content-tags.utils"
import { z } from "astro:content"

// Zod schema for frontmatter validation
const FrontmatterSchema = z.object({
  title: z.string().min(1, "Title is required"),
  minutesRead: z.string().min(1, "Minutes read is required"),
  publishedOn: z.coerce.date(),
  lastUpdatedOn: z.coerce.date(),
  description: z.string().min(1, "Description is required"),
  tags: z.array(z.string()),
  isDraft: z.boolean().optional(),
})

export interface Props {
  frontmatter: z.infer<typeof FrontmatterSchema>
}

const { title, isDraft, minutesRead, publishedOn, lastUpdatedOn, description, tags: tagIds } = Astro.props.frontmatter

// This layout is for direct markdown pages in the pages directory
// These pages are not processed via content modal, so dates and other fields
// need to be manually converted and validated

// Validate frontmatter using Zod schema
const validationResult = FrontmatterSchema.safeParse(Astro.props.frontmatter)

if (!validationResult.success) {
  const errors = validationResult.error.errors.map((err) => `${err.path.join(".")}: ${err.message}`).join(", ")
  throw new Error(`Frontmatter validation failed: ${errors}`)
}

// Resolve tags from references to actual tag names
const tagRefs = (tagIds ?? []).map((tagId) => ({ collection: "tags", id: tagId }) as const)
const tags = await getTagsByRefs(tagRefs)

const crumbs: { title: string; href: string }[] = []
---

<Layout {title} {description} {crumbs} pageType="default" noIndex={isDraft}>
  <Article {isDraft} {title} {description} {minutesRead} {publishedOn} {lastUpdatedOn} {tags}>
    <slot />
  </Article>
</Layout>
