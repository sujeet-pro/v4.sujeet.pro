---
import { Icon } from "astro-icon/components";
---

<style>
  [data-theme-icon] {
    display: none;
  }

  :global([data-current-theme="light"]) [data-theme-icon="light"],
  :global([data-current-theme="dark"]) [data-theme-icon="dark"],
  :global([data-current-theme="auto"]) [data-theme-icon="auto"] {
    display: block;
  }
</style>

<script is:inline>
  window.applySiteTheme =
    window.applySiteTheme ||
    function applySiteTheme(theme) {
      theme = theme || localStorage.getItem("theme");
      if (theme === "light" || theme === "dark") {
        document.documentElement.setAttribute("data-theme", theme);
        document.documentElement.setAttribute("data-current-theme", theme);
      } else {
        const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
        document.documentElement.setAttribute("data-theme", systemTheme);
        document.documentElement.setAttribute("data-current-theme", "auto");
      }
    };
  window.applySiteTheme();
</script>

<div class="flex items-center">
  <button id="theme-toggle" class="p-2" aria-label="Toggle theme">
    <Icon name="carbon:sun" class="h-5 w-5" data-theme-icon="light" />
    <Icon name="carbon:moon" class="h-5 w-5" data-theme-icon="dark" />
    <Icon name="carbon:screen" class="h-5 w-5" data-theme-icon="auto" />
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeCyclerButton = document.querySelector<HTMLButtonElement>("button#theme-toggle");
    const themes = ["light", "dark", "auto"] as const;
    type Theme = (typeof themes)[number];
    const systemPreferenceQuery = window.matchMedia("(prefers-color-scheme: dark)");

    function getCurrentTheme() {
      const currentTheme = document.documentElement.getAttribute("data-current-theme");
      return currentTheme === "light" || currentTheme === "dark" ? (currentTheme as Theme) : "auto";
    }

    function cycleThemeHandler() {
      const currentTheme = getCurrentTheme();
      const currentIndex = themes.indexOf(currentTheme);
      const nextIndex = (currentIndex + 1) % themes.length;
      const newTheme = themes[nextIndex] || "auto";
      window.applySiteTheme(newTheme);
      if (newTheme === "auto") {
        localStorage.removeItem("theme");
      } else {
        localStorage.setItem("theme", newTheme);
      }
    }

    // Add event listeners
    themeCyclerButton?.addEventListener("click", cycleThemeHandler);
    systemPreferenceQuery.addEventListener("change", () => {
      if (getCurrentTheme() === "auto") {
        window.applySiteTheme("auto");
      }
    });
  });
</script>
