---
import type { Series, Tag } from "@/utils/content.type";
import FormattedDate from "./formatted-date.astro";
import Link from "./link.astro";
import ReadingTime from "./reading-time.astro";
import Accordion from "./accordion.astro";

interface Props {
  title: string;
  minutesRead: string;
  publishedOn: Date;
  lastUpdatedOn: Date;
  description: string;
  tags: Tag[];
  as?: "article" | "section";
  isDraft?: boolean;
  series?: Series;
}

const { title, minutesRead, publishedOn, lastUpdatedOn, description, tags, as, isDraft, series } = Astro.props as Props;
const Element = as === "article" ? "article" : "section";
---

<Element class="mx-auto my-8 prose prose-base max-w-none dark:prose-invert">
  {title ? <h1>{title}</h1> : null}
  <div class="mb-8 flex flex-wrap items-center gap-2 font-light">
    {
      isDraft ? (
        <>
          <span>Draft</span>
          <span>•</span>
        </>
      ) : null
    }
    <ReadingTime readingTime={minutesRead} />
    <span>•</span>
    <span class="flex items-center gap-1">
      Published on <FormattedDate date={publishedOn} />
    </span>
    {
      publishedOn.toDateString() !== lastUpdatedOn.toDateString() && (
        <>
          <span>•</span>
          <span class="flex items-center gap-1">
            Last updated on <FormattedDate date={lastUpdatedOn} />
          </span>
        </>
      )
    }
  </div>
  {description ? <p>{description}</p> : null}
  {
    series && (
      <Accordion title={`Part of Series: ${series.name}`} open={true}>
        <ol class="list-inside list-decimal space-y-2 p-0">
          {series.blogs.map((blog) => (
            <li class="pl-2">
              {blog.title === title ? (
                <span class="font-medium text-primary-600 dark:text-primary-400">{blog.title}</span>
              ) : (
                <Link href={blog.href} class="hover:underline">
                  {blog.title}
                </Link>
              )}
            </li>
          ))}
        </ol>
      </Accordion>
    )
  }
  <slot />
  {
    tags && tags.length > 0 && (
      <div class="mt-4 flex flex-wrap gap-2">
        {tags.map((tag) => (
          <Link href={tag.href} class="tag sp-border-muted rounded-full border px-3 py-1 text-sm">
            #{tag.name}
          </Link>
        ))}
      </div>
    )
  }
</Element>
