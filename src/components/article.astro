---
import FormattedDate from "./formatted-date.astro";
import Link from "./link.astro";
import ReadingTime from "./reading-time.astro";

interface Props {
  title: string;
  minutesRead: string;
  publishedOn: Date;
  lastUpdatedOn: Date;
  description: string;
  tags: string[];
  as?: "article" | "section";
}

const { title, minutesRead, publishedOn, lastUpdatedOn, description, tags, as } = Astro.props as Props;
const Element = as === "article" ? "article" : "section";
---

<Element
  class="mx-auto my-8 prose prose-base max-w-none prose-slate dark:prose-invert prose-headings:font-normal prose-h1:font-light"
>
  {title ? <h1 class="mb-2 text-3xl font-light">{title}</h1> : null}
  <div class="suppressed-text mb-8 flex flex-wrap items-center gap-2">
    <ReadingTime readingTime={minutesRead} />
    <span>•</span>
    <span class="flex items-center gap-1">
      Published on <FormattedDate date={publishedOn} />
    </span>
    {
      publishedOn.toDateString() !== lastUpdatedOn.toDateString() && (
        <>
          <span>•</span>
          <span class="flex items-center gap-1">
            Last updated on <FormattedDate date={lastUpdatedOn} />
          </span>
        </>
      )
    }
  </div>
  {description ? <p>{description}</p> : null}
  <slot />
  {
    tags && tags.length > 0 && (
      <div class="mt-4 flex flex-wrap gap-2">
        {tags.map((tag) => (
          <Link href={`/tags/${tag}`} class="tag rounded-full border px-3 py-1 text-sm">
            {tag}
          </Link>
        ))}
      </div>
    )
  }
</Element>
