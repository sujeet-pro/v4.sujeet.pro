---
import FormattedDate from "./formatted-date.astro";
import Link from "./link.astro";
import ReadingTime from "./reading-time.astro";

type Props = {
  item: {
    title: string;
    description: string;
    link: string;
    publishedOn: Date;
    lastUpdatedOn: Date;
    isDraft: boolean;
    id: string;
    readingTime: string;
  };
};
const { item } = Astro.props as Props;

// Check if lastUpdatedOn is different from publishedOn (date only)
const showLastUpdated = item.publishedOn.toDateString() !== item.lastUpdatedOn.toDateString();
---

<li class="group relative cursor-pointer rounded-lg border-b p-6">
  <!-- Content wrapper with relative positioning -->
  <div class="relative z-10">
    <!-- Title with link -->
    <h2 class="item-heading mb-2 text-2xl font-light">
      <Link href={item.link} class="item-link no-underline hover:underline">
        {item.title}
      </Link>
    </h2>

    <!-- Description -->
    <p class="mb-3 line-clamp-2">
      {item.description}
    </p>

    <!-- Meta information -->
    <div class="suppressed-text flex items-center gap-2">
      <FormattedDate date={item.publishedOn} type="published" />
      {
        showLastUpdated ? (
          <>
            <span>•</span>
            <FormattedDate date={item.lastUpdatedOn} type="updated" />
          </>
        ) : null
      }
      <span>•</span>
      <ReadingTime readingTime={item.readingTime} />
      {
        item.isDraft ? (
          <>
            <span>•</span>
            <span class="">Draft</span>
          </>
        ) : null
      }
    </div>
  </div>
</li>

<style>
  .item-link::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
</style>
